normMatrix <- normMatrix[!duplicated(id_names),]
rownames(normMatrix) <- id_names[!duplicated(id_names)]
data.fit <- limma::lmFit(normMatrix,design)
top_table <- list()
# Make contrast
contrast.matrix <- limma::makeContrasts(contrasts = i,levels=design)
# Fit contrasts
data.fit.con <- limma::contrasts.fit(data.fit,contrast.matrix)
# eBayes
data.fit.eb <- limma::eBayes(data.fit.con)
test <- limma::topTable(data.fit.eb,
sort.by = "P",
n = Inf,
confInt = TRUE)
test <- limma::topTable(data.fit.eb,
sort.by = "P",
n = Inf,
confint = TRUE)
View(test)
all((test$logFC - test$CI.L) == (test$CI.R - test$logFC))
(test$logFC - test$CI.L) - (test$CI.R - test$logFC)
all(abs((test$logFC - test$CI.L) - (test$CI.R - test$logFC)) < 10^-10)
temp_toptable <- limma::topTable(data.fit.eb,
sort.by = "P",
n = Inf,
confint = TRUE)
top_table <- getStatistics(normMatrix = normMatrix,
metaData = metaData,
expFactor = "Group",
covGroups_num = "Age",
covGroups_char = "Area",
comparisons = comparisons[1],
addAnnotation = FALSE,
biomart_dataset = "hsapiens_gene_ensembl",
biomart_attributes = c("ensembl_gene_id",
"entrezgene_id",
"gene_name",
"affy_hugene_2_0_st_v1" ),
biomart_filters = "affy_hugene_2_0_st_v1")
View(top_table)
getStatistics <- function(normMatrix,
metaData,
expFactor,
covGroups_num,
covGroups_char,
comparisons,
addAnnotation = TRUE,
biomart_dataset = "hsapiens_gene_ensembl",
biomart_attributes = c("ensembl_gene_id",
"entrezgene_id",
"gene_name"),
biomart_filters = "entrezgene_id"){
tryCatch({
# Get experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(apply(metaData[,expFactor], 1, paste, collapse = "_" ))
} else{
experimentFactor <- factor(metaData[,expFactor])
}
# Get covariates
for (n in covGroups_num){
metaData[,n] <- as.numeric(metaData[,n])
}
for (c in covGroups_char){
metaData[,c] <- as.character(metaData[,c])
}
covariates <- c(covGroups_num, covGroups_char)
# Make formula
if (!is.null(covariates)){
formula <- paste("~ 0", "experimentFactor", paste0("metaData$`",covariates,"`", collapse = "+"),sep = "+")
} else {
formula <- paste("~ 0", "experimentFactor",sep = "+")
}
# Make design matrix
design <- model.matrix(as.formula(formula))
colnames(design)[1:length(levels(experimentFactor))] <- make.names(levels(factor(experimentFactor)))
colnames(design) <- make.names(colnames(design))
#fit linear model
data.fit <- limma::lmFit(normMatrix,design)
# Perform statistical comparison for each of the selected comparison
top_table <- list()
for (i in comparisons){
# Make contrast
contrast.matrix <- limma::makeContrasts(contrasts = i,levels=design)
# Fit contrasts
data.fit.con <- limma::contrasts.fit(data.fit,contrast.matrix)
# eBayes
data.fit.eb <- limma::eBayes(data.fit.con)
temp_toptable <- limma::topTable(data.fit.eb,
sort.by = "P",
n = Inf,
confint = TRUE)
# Calculate SE of log2FC
temp_toptable$SE <- (temp_toptable$CI.R - temp_toptable$CI.L)/3.92
# get top table
top_table[[i]] <- temp_toptable[,c("AveExpr",
"logFC",
"SE",
"P.Value",
"adj.P.Val")]
top_table[[i]] <- cbind(rownames(top_table[[i]]), top_table[[i]])
rownames(top_table[[i]]) <- NULL
colnames(top_table[[i]]) <- c("GeneID", "meanExpr", "log2FC", "log2FC SE",
"p-value", "adj. p-value")
}
# Add annotations to table if this option is selected
if (addAnnotation == TRUE){
# Change attribute name
if (biomart_dataset == "hsapiens_gene_ensembl"){
biomart_attributes1 <- stringr::str_replace(biomart_attributes,
"gene_name",
"hgnc_symbol")
} else{
biomart_attributes1 <- stringr::str_replace(biomart_attributes,
"gene_name",
"external_gene_name")
}
# Do this for each top table in the list
for (t in 1:length(top_table)){
# Round numbers in top table
for (n in 2:6){
top_table[[t]][,n] <- signif(top_table[[t]][,n],3)
}
# Get annotations
ensembl <- biomaRt::useMart("ensembl")
ensembl <- biomaRt::useDataset(biomart_dataset, mart=ensembl)
annotations <- biomaRt::getBM(attributes=biomart_attributes1,
filters = biomart_filters,
values = top_table[[t]]$GeneID,
mart = ensembl)
# Convert entrezgene id to character
if("entrezgene_id" %in% biomart_attributes){
annotations$entrezgene_id <- as.character(annotations$entrezgene_id)
}
annotations[annotations == ""] <- NA
annotations[annotations == " "] <- NA
# Combine annotations with top table
annotations[,biomart_filters] <- as.character(annotations[,biomart_filters])
top_table_ann <- dplyr::left_join(top_table[[t]], annotations,
by = c("GeneID" = biomart_filters))
colnames(top_table_ann)[colnames(top_table_ann) == "hgnc_symbol"] <- "gene_name"
colnames(top_table_ann)[colnames(top_table_ann) == "external_gene_name"] <- "gene_name"
# Make sure that there are no duplicate gene ids
for (a in 1:(ncol(top_table_ann)-6)){
temp1 <- unique(top_table_ann[,c(1,6+a)])
temp1 <- temp1[!is.na(temp1[,2]),]
temp_ann <- temp1 %>%
dplyr::group_by(GeneID) %>%
dplyr::summarise_at(colnames(top_table_ann)[6+a], function(x) paste(x,collapse = ", "))
top_table[[t]] <- dplyr::left_join(top_table[[t]], temp_ann,
by = c("GeneID" = "GeneID"))
}
}
}
return(top_table)
}, error = function(cond){
NULL
})
}
top_table <- getStatistics(normMatrix = normMatrix,
metaData = metaData,
expFactor = "Group",
covGroups_num = "Age",
covGroups_char = "Area",
comparisons = comparisons[1],
addAnnotation = FALSE,
biomart_dataset = "hsapiens_gene_ensembl",
biomart_attributes = c("ensembl_gene_id",
"entrezgene_id",
"gene_name",
"affy_hugene_2_0_st_v1" ),
biomart_filters = "affy_hugene_2_0_st_v1")
View(top_table)
shiny::runApp()
source("~/GitHub/ArrayAnalysis_Shiny/FUNCTIONS.R")
#}, error = function(cond){
#  NULL
#})
}
source("~/GitHub/ArrayAnalysis_Shiny/FUNCTIONS.R")
runApp()
source("~/GitHub/ArrayAnalysis_Shiny/FUNCTIONS.R")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
# Clear workspace and console
rm(list = ls())
cat("\014")
gc()
# Load packages
library(DESeq2)
library(apeglm) #bioconductor
# Set working directory
setwd("C:/Users/jarno/OneDrive/Documents/GitHub/ArrayAnalysis_Shiny")
# Load functions
source("FUNCTIONS.R")
# Get expression matrix
gxData <- readRNASeq(path="Data/RNAseq/rawExpr_GSE128380.csv")
# Get meta data
metaData <- getMetaData(path = "Data/RNAseq/sampleInfo_GSE128380.csv",
celfiles = colnames(gxData),
filetype = ".tsv/.csv file")
gxData <- gxData[,rownames(metaData)]
expFactor <- c("Genotype", "Tissue")
# Experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(apply(metaData[,expFactor], 1, paste, collapse = "_" ))
} else{
experimentFactor <- factor(metaData[,expFactor])
}
normMatrix = gxData
covGroups_num = "Age"
covGroups_char = NULL
comparisons = makeComparisons(unique(experimentFactor))[1]
addAnnotation = FALSE
# Get experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(apply(metaData[,expFactor], 1, paste, collapse = "_" ))
} else{
experimentFactor <- factor(metaData[,expFactor])
}
# Get covariates
for (n in covGroups_num){
metaData[,n] <- as.numeric(metaData[,n])
}
for (c in covGroups_char){
metaData[,c] <- as.character(metaData[,c])
}
covariates <- c(covGroups_num, covGroups_char)
# Make formula
if (!is.null(covariates)){
formula <- paste("~ 0", "experimentFactor", paste0("metaData$`",covariates,"`", collapse = "+"),sep = "+")
} else {
formula <- paste("~ 0", "experimentFactor",sep = "+")
}
# Make design matrix
design <- model.matrix(as.formula(formula))
colnames(design)[1:length(levels(experimentFactor))] <- make.names(levels(factor(experimentFactor)))
colnames(design) <- make.names(colnames(design))
v <- voom(normMatrix, design, plot=FALSE)
View(normMatrix)
gxMatrix <- RNASeqNormalization(gxData = gxData,
metaData = metaData,
filterThres = 10,
smallestGroupSize = 3)
counts <- 2^gxMatrix - 1
View(counts)
dds <- DESeqDataSetFromMatrix(countData = gxData,
colData = metaData,
design = ~0)
# Filtering
keep <- rowSums(counts(dds) >= filterThres) >= smallestGroupSize
dds <- estimateSizeFactors(dds)
cpm(dds)
normMatrix = counts
# Get experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(apply(metaData[,expFactor], 1, paste, collapse = "_" ))
} else{
experimentFactor <- factor(metaData[,expFactor])
}
# Get covariates
for (n in covGroups_num){
metaData[,n] <- as.numeric(metaData[,n])
}
for (c in covGroups_char){
metaData[,c] <- as.character(metaData[,c])
}
covariates <- c(covGroups_num, covGroups_char)
# Make formula
if (!is.null(covariates)){
formula <- paste("~ 0", "experimentFactor", paste0("metaData$`",covariates,"`", collapse = "+"),sep = "+")
} else {
formula <- paste("~ 0", "experimentFactor",sep = "+")
}
# Make design matrix
design <- model.matrix(as.formula(formula))
colnames(design)[1:length(levels(experimentFactor))] <- make.names(levels(factor(experimentFactor)))
colnames(design) <- make.names(colnames(design))
v <- voom(normMatrix, design, plot=FALSE)
#fit linear model
data.fit <- limma::lmFit(v,design)
# Perform statistical comparison for each of the selected comparison
top_table <- list()
for (i in comparisons){
# Make contrast
contrast.matrix <- limma::makeContrasts(contrasts = i,levels=design)
# Fit contrasts
data.fit.con <- limma::contrasts.fit(data.fit,contrast.matrix)
# eBayes
data.fit.eb <- limma::eBayes(data.fit.con)
temp_toptable <- limma::topTable(data.fit.eb,
sort.by = "P",
n = Inf,
confint = TRUE)
# Calculate SE of log2FC
temp_toptable$SE <- (temp_toptable$CI.R - temp_toptable$CI.L)/3.92
# get top table
top_table[[i]] <- temp_toptable[,c("AveExpr",
"logFC",
"SE",
"P.Value",
"adj.P.Val")]
top_table[[i]] <- cbind(rownames(top_table[[i]]), top_table[[i]])
rownames(top_table[[i]]) <- NULL
colnames(top_table[[i]]) <- c("GeneID", "meanExpr", "log2FC", "log2FC SE",
"p-value", "adj. p-value")
}
# Get experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(apply(metaData[,expFactor], 1, paste, collapse = "_" ))
} else{
experimentFactor <- factor(metaData[,expFactor])
}
# Get covariates
for (n in covGroups_num){
metaData[,n] <- as.numeric(metaData[,n])
}
for (c in covGroups_char){
metaData[,c] <- as.character(metaData[,c])
}
covariates <- c(covGroups_num, covGroups_char)
# Make formula
if (!is.null(covariates)){
formula <- paste("~ 0", "experimentFactor", paste0("metaData$`",covariates,"`", collapse = "+"),sep = "+")
} else {
formula <- paste("~ 0", "experimentFactor",sep = "+")
}
# Make design matrix
design <- model.matrix(as.formula(formula))
colnames(design)[1:length(levels(experimentFactor))] <- make.names(levels(factor(experimentFactor)))
colnames(design) <- make.names(colnames(design))
v <- voom(normMatrix, design, plot=FALSE)
data.fit <- limma::lmFit(v,design)
top_table <- list()
i = comparisons[1]
contrast.matrix <- limma::makeContrasts(contrasts = i,levels=design)
design
make.names(i)
make.names(metaData)
make.names(experimentFactor)
shiny::runApp()
runApp()
source("~/GitHub/ArrayAnalysis_Shiny/FUNCTIONS.R")
runApp()
source("~/GitHub/ArrayAnalysis_Shiny/FUNCTIONS.R")
# Clear workspace and console
rm(list = ls())
cat("\014")
gc()
# Load packages
library(DESeq2)
library(apeglm) #bioconductor
# Set working directory
setwd("C:/Users/jarno/OneDrive/Documents/GitHub/ArrayAnalysis_Shiny")
# Load functions
source("FUNCTIONS.R")
# Get expression matrix
gxData <- readRNASeq(path="Data/RNAseq/rawExpr_GSE128380.csv")
# Get meta data
metaData <- getMetaData(path = "Data/RNAseq/sampleInfo_GSE128380.csv",
celfiles = colnames(gxData),
filetype = ".tsv/.csv file")
gxData <- gxData[,rownames(metaData)]
expFactor <- c("Genotype", "Tissue")
# Experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(apply(metaData[,expFactor], 1, paste, collapse = "_" ))
} else{
experimentFactor <- factor(metaData[,expFactor])
}
gxMatrix <- RNASeqNormalization(gxData = gxData,
metaData = metaData,
filterThres = 10,
smallestGroupSize = 3)
counts <- 2^gxMatrix - 1
top_table <- getStatistics_RNASeq_processed(normMatrix = counts,
metaData = metaData,
expFactor = expFactor,
covGroups_num = "Age",
covGroups_char = NULL,
comparisons = makeComparisons(unique(experimentFactor))[1],
addAnnotation = FALSE,
biomart_dataset = "hsapiens_gene_ensembl",
biomart_attributes = c("ensembl_gene_id",
"entrezgene_id",
"gene_name"),
biomart_filters = "entrezgene_id")
normMatrix = counts
covGroups_num = "Age"
covGroups_char = NULL
# Experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(make.names(apply(metaData[,expFactor], 1, paste, collapse = "_" )))
} else{
experimentFactor <- factor(make.names(metaData[,expFactor]))
}
top_table <- getStatistics_RNASeq_processed(normMatrix = counts,
metaData = metaData,
expFactor = expFactor,
covGroups_num = "Age",
covGroups_char = NULL,
comparisons = makeComparisons(unique(experimentFactor))[1],
addAnnotation = FALSE,
biomart_dataset = "hsapiens_gene_ensembl",
biomart_attributes = c("ensembl_gene_id",
"entrezgene_id",
"gene_name"),
biomart_filters = "entrezgene_id")
shiny::runApp()
runApp()
runApp()
source("~/GitHub/ArrayAnalysis_Shiny/FUNCTIONS.R")
runApp()
runApp()
runApp()
# Clear workspace and console
rm(list = ls())
cat("\014")
gc()
# Load packages
library(DESeq2)
library(apeglm) #bioconductor
# Set working directory
setwd("C:/Users/jarno/OneDrive/Documents/GitHub/ArrayAnalysis_Shiny")
# Load functions
source("FUNCTIONS.R")
# Get expression matrix
gxData <- readRNASeq(path="Data/RNAseq/rawExpr_GSE128380.csv")
# Get meta data
metaData <- getMetaData(path = "Data/RNAseq/sampleInfo_GSE128380.csv",
celfiles = colnames(gxData),
filetype = ".tsv/.csv file")
gxData <- gxData[,rownames(metaData)]
expFactor <- c("Genotype", "Tissue")
# Experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(make.names(apply(metaData[,expFactor], 1, paste, collapse = "_" )))
} else{
experimentFactor <- factor(make.names(metaData[,expFactor]))
}
gxMatrix <- RNASeqNormalization(gxData = gxData,
metaData = metaData,
filterThres = 10,
smallestGroupSize = 3)
counts <- 2^gxMatrix - 1
top_table <- getStatistics_RNASeq_processed(normMatrix = counts,
metaData = metaData,
expFactor = expFactor,
covGroups_num = "Age",
covGroups_char = NULL,
comparisons = makeComparisons(unique(experimentFactor))[1],
addAnnotation = FALSE,
biomart_dataset = "hsapiens_gene_ensembl",
biomart_attributes = c("ensembl_gene_id",
"entrezgene_id",
"gene_name"),
biomart_filters = "entrezgene_id")
names(top_table)
runApp()
runApp()
runApp()
runApp()
runApp()
# Clear workspace and console
rm(list = ls())
cat("\014")
gc()
# Load packages
library(DESeq2)
library(apeglm) #bioconductor
# Set working directory
setwd("C:/Users/jarno/OneDrive/Documents/GitHub/ArrayAnalysis_Shiny")
# Load functions
source("FUNCTIONS.R")
# Get expression matrix
gxData <- readRNASeq(path="Data/RNAseq/rawExpr_GSE128380.csv")
# Get meta data
metaData <- getMetaData(path = "Data/RNAseq/sampleInfo_GSE128380.csv",
celfiles = colnames(gxData),
filetype = ".tsv/.csv file")
gxData <- gxData[,rownames(metaData)]
expFactor <- c("Genotype", "Tissue")
# Experiment factor
if(length(expFactor) > 1){
experimentFactor <- factor(make.names(apply(metaData[,expFactor], 1, paste, collapse = "_" )))
} else{
experimentFactor <- factor(make.names(metaData[,expFactor]))
}
gxMatrix <- RNASeqNormalization(gxData = gxData,
metaData = metaData,
filterThres = 10,
smallestGroupSize = 3)
range(gxMatrux)
range(gxMatrix)
counts <- 2^gxMatrix - 1
range(counts)
r <- range(gxMatrix)
runApp()
runApp()
gxData <- getGEO(filename="Data/Microarray/GSE6955_series_matrix.txt.gz")
test <- expr(gxData)
test <- exprs(gxData)
range(test)
m <- exprs(gxData)
m <- m[rowSums(m<=0)==0,]
m <- log2(m+1)
range(m)
runApp()
